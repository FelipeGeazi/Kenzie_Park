openapi: 3.0.3
info:
  title: Titulo exemplo
  version: 0.0.0
  description: descriÃ§ao exemplo
paths:
  /api/accounts/:
    get:
      operationId: accounts_list
      tags:
      - accounts
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Account'
          description: ''
    post:
      operationId: accounts_create
      tags:
      - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Account'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Account'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Account'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
          description: ''
  /api/accounts/{account_id}/:
    get:
      operationId: accounts_retrieve
      description: |-
        APIView
        has_object_permission -> self.check_object_permission
      parameters:
      - in: path
        name: account_id
        schema:
          type: integer
        required: true
      tags:
      - accounts
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
          description: ''
    put:
      operationId: accounts_update
      description: |-
        APIView
        has_object_permission -> self.check_object_permission
      parameters:
      - in: path
        name: account_id
        schema:
          type: integer
        required: true
      tags:
      - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Account'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Account'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Account'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
          description: ''
    patch:
      operationId: accounts_partial_update
      description: |-
        APIView
        has_object_permission -> self.check_object_permission
      parameters:
      - in: path
        name: account_id
        schema:
          type: integer
        required: true
      tags:
      - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedAccount'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedAccount'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedAccount'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
          description: ''
    delete:
      operationId: accounts_destroy
      description: |-
        APIView
        has_object_permission -> self.check_object_permission
      parameters:
      - in: path
        name: account_id
        schema:
          type: integer
        required: true
      tags:
      - accounts
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/login/:
    post:
      operationId: login_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /api/parking-lots/:
    get:
      operationId: parking_lots_list
      tags:
      - parking-lots
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ParkingLot'
          description: ''
    post:
      operationId: parking_lots_create
      tags:
      - parking-lots
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DetailedParkingLot'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/DetailedParkingLot'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/DetailedParkingLot'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedParkingLot'
          description: ''
  /api/parking-lots/{parking_lot_id}/:
    get:
      operationId: parking_lots_retrieve
      parameters:
      - in: path
        name: parking_lot_id
        schema:
          type: integer
        required: true
      tags:
      - parking-lots
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParkingLot'
          description: ''
    put:
      operationId: parking_lots_update
      parameters:
      - in: path
        name: parking_lot_id
        schema:
          type: integer
        required: true
      tags:
      - parking-lots
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ParkingLot'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ParkingLot'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ParkingLot'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParkingLot'
          description: ''
    patch:
      operationId: parking_lots_partial_update
      parameters:
      - in: path
        name: parking_lot_id
        schema:
          type: integer
        required: true
      tags:
      - parking-lots
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedParkingLot'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedParkingLot'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedParkingLot'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParkingLot'
          description: ''
    delete:
      operationId: parking_lots_destroy
      parameters:
      - in: path
        name: parking_lot_id
        schema:
          type: integer
        required: true
      tags:
      - parking-lots
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/parking-lots/{parking_lot_id}/floors/:
    get:
      operationId: parking_lots_floors_list
      parameters:
      - in: path
        name: parking_lot_id
        schema:
          type: integer
        required: true
      tags:
      - parking-lots
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Floor'
          description: ''
    post:
      operationId: parking_lots_floors_create
      parameters:
      - in: path
        name: parking_lot_id
        schema:
          type: integer
        required: true
      tags:
      - parking-lots
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Floor'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Floor'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Floor'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Floor'
          description: ''
  /api/refresh/:
    post:
      operationId: refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - refresh
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
components:
  schemas:
    Account:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          maxLength: 127
        password:
          type: string
          writeOnly: true
          maxLength: 128
        is_superuser:
          type: boolean
          title: Superuser status
          description: Designates that this user has all permissions without explicitly
            assigning them.
        shift:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/ShiftEnum'
          - $ref: '#/components/schemas/NullEnum'
        parking_lots_count:
          type: integer
          readOnly: true
      required:
      - email
      - id
      - parking_lots_count
      - password
      - username
    DetailedParkingLot:
      type: object
      description: InformaÃ§Ãµes detalhadas sobre owner (OwnerSerializer)
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 127
        owner:
          allOf:
          - $ref: '#/components/schemas/Account'
          readOnly: true
      required:
      - id
      - name
      - owner
    Floor:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 127
        spot_priority:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        parking_lot:
          type: integer
          readOnly: true
        motorcycle_spots:
          type: integer
          writeOnly: true
        car_spots:
          type: integer
          writeOnly: true
        spots_count:
          type: string
          readOnly: true
      required:
      - car_spots
      - id
      - motorcycle_spots
      - name
      - parking_lot
      - spot_priority
      - spots_count
    NullEnum:
      enum:
      - null
    ParkingLot:
      type: object
      description: Somente a FK de owner
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 127
        owner:
          type: integer
        owner_username:
          type: string
          readOnly: true
      required:
      - id
      - name
      - owner
      - owner_username
    PatchedAccount:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          maxLength: 127
        password:
          type: string
          writeOnly: true
          maxLength: 128
        is_superuser:
          type: boolean
          title: Superuser status
          description: Designates that this user has all permissions without explicitly
            assigning them.
        shift:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/ShiftEnum'
          - $ref: '#/components/schemas/NullEnum'
        parking_lots_count:
          type: integer
          readOnly: true
    PatchedParkingLot:
      type: object
      description: Somente a FK de owner
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 127
        owner:
          type: integer
        owner_username:
          type: string
          readOnly: true
    ShiftEnum:
      enum:
      - Matutino
      - Vespertino
      - Noturno
      - NÃ£o informado
      type: string
    TokenObtainPair:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - password
      - refresh
      - username
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          writeOnly: true
      required:
      - access
      - refresh
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
